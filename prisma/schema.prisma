generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // trying to fix on docker compose
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  servers       Server[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum ServerType {
  VANILLA
  FORGE
  FABRIC
  NEOFORGE
  SPIGOT
  PAPER
}

enum ServerStatus {
  CREATING
  RUNNING
  STOPPED
  ERROR
}

model Server {
  id          String  @id @default(uuid())
  name        String
  description String?

  eula    Boolean @default(true)
  version String

  minMemoryMB String @default("2G")
  maxMemoryMB String @default("4G")

  serverType ServerType
  status     ServerStatus @default(CREATING)

  ipAddress String @db.Inet
  port      Int

  containerName String  @unique
  volumeName    String  @unique
  containerId   String? @unique
  dockerImage   String  @default("itzg/minecraft-server:latest")

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([ipAddress, port])
  @@index([ownerId, status])
  @@map("servers")
}
